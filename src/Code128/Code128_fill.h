/*
 * Code128_fill.h
 *
 *  Created on: 2015年4月22日
 *      Author: welkinm
 */

#ifndef CODE128_CODE128_FILL_H_
#define CODE128_CODE128_FILL_H_
#include "../barcode_bmp.h"

typedef struct CODE128_MAP_TYPEDEF {
	char idx;
	char a;
	char aStr[8];
	char b;
	char bStr[8];
	char c;
	char cStr[8];
	const char encoding[8];
}Code128_Map;

#define CODE128_ENCODING_LENGTH 107
const Code128_Map CODE128_ENCODING[CODE128_ENCODING_LENGTH] = {
		{0,     32, " ",        32,  " ",         0, "00",       "212222" },
		{1,     33, "!",        33,  "!",         1, "01",       "222122" },
		{2,     34, "\"",       34,  "\"",        2, "02",       "222221" },
		{3,     35, "#",        35,  "#",         3, "03",       "121223" },
		{4,     36, "$",        36,  "$",         4, "04",       "121322" },
		{5,     37, "%",        37,  "%",         5, "05",       "131222" },
		{6,     38, "&",        38,  "&",         6, "06",       "122213" },
		{7,     39, "'",        39,  "'",         7, "07",       "122312" },
		{8,     40, "(",        40,  "(",         8, "08",       "132212" },
		{9,     41, ")",        41,  ")",         9, "09",       "221213" },
		{10,    42, "*",        42,  "*",        10, "10",       "221312" },
		{11,    43, "+",        43,  "+",        11, "11",       "231212" },
		{12,    44, ",",        44,  ",",        12, "12",       "112232" },
		{13,    45, "-",        45,  "-",        13, "13",       "122132" },
		{14,    46, ".",        46,  ".",        14, "14",       "122231" },
		{15,    47, "/",        47,  "/",        15, "15",       "113222" },
		{16,    48, "0",        48,  "0",        16, "16",       "123122" },
		{17,    49, "1",        49,  "1",        17, "17",       "123221" },
		{18,    50, "2",        50,  "2",        18, "18",       "223211" },
		{19,    51, "3",        51,  "3",        19, "19",       "221132" },
		{20,    52, "4",        52,  "4",        20, "20",       "221231" },
		{21,    53, "5",        53,  "5",        21, "21",       "213212" },
		{22,    54, "6",        54,  "6",        22, "22",       "223112" },
		{23,    55, "7",        55,  "7",        23, "23",       "312131" },
		{24,    56, "8",        56,  "8",        24, "24",       "311222" },
		{25,    57, "9",        57,  "9",        25, "25",       "321122" },
		{26,    58, ":",        58,  ":",        26, "26",       "321221" },
		{27,    59, ";",        59,  ";",        27, "27",       "312212" },
		{28,    60, "<",        60,  "<",        28, "28",       "322112" },
		{29,    61, "=",        61,  "=",        29, "29",       "322211" },
		{30,    62, ">",        62,  ">",        30, "30",       "212123" },
		{31,    63, "?",        63,  "?",        31, "31",       "212321" },
		{32,    64, "@",        64,  "@",        32, "32",       "232121" },
		{33,    65, "A",        65,  "A",        33, "33",       "111323" },
		{34,    66, "B",        66,  "B",        34, "34",       "131123" },
		{35,    67, "C",        67,  "C",        35, "35",       "131321" },
		{36,    68, "D",        68,  "D",        36, "36",       "112313" },
		{37,    69, "E",        69,  "E",        37, "37",       "132113" },
		{38,    70, "F",        70,  "F",        38, "38",       "132311" },
		{39,    71, "G",        71,  "G",        39, "39",       "211313" },
		{40,    72, "H",        72,  "H",        40, "40",       "231113" },
		{41,    73, "I",        73,  "I",        41, "41",       "231311" },
		{42,    74, "J",        74,  "J",        42, "42",       "112133" },
		{43,    75, "K",        75,  "K",        43, "43",       "112331" },
		{44,    76, "L",        76,  "L",        44, "44",       "132131" },
		{45,    77, "M",        77,  "M",        45, "45",       "113123" },
		{46,    78, "N",        78,  "N",        46, "46",       "113321" },
		{47,    79, "O",        79,  "O",        47, "47",       "133121" },
		{48,    80, "P",        80,  "P",        48, "48",       "313121" },
		{49,    81, "Q",        81,  "Q",        49, "49",       "211331" },
		{50,    82, "R",        82,  "R",        50, "50",       "231131" },
		{51,    83, "S",        83,  "S",        51, "51",       "213113" },
		{52,    84, "T",        84,  "T",        52, "52",       "213311" },
		{53,    85, "U",        85,  "U",        53, "53",       "213131" },
		{54,    86, "V",        86,  "V",        54, "54",       "311123" },
		{55,    87, "W",        87,  "W",        55, "55",       "311321" },
		{56,    88, "X",        88,  "X",        56, "56",       "331121" },
		{57,    89, "Y",        89,  "Y",        57, "57",       "312113" },
		{58,    90, "Z",        90,  "Z",        58, "58",       "312311" },
		{59,    91, "[",        91,  "[",        59, "59",       "332111" },
		{60,    92, "\\",       92,  "\\",       60, "60",       "314111" },
		{61,    93, "]",        93,  "]",        61, "61",       "221411" },
		{62,    94, "^",        94,  "^",        62, "62",       "431111" },
		{63,    95, "_",        95,  "_",        63, "63",       "111224" },
		{64,     0, "NUL",      96,  "`",        64, "64",       "111422" },
		{65,     1, "SOH",      97,  "a",        65, "65",       "121124" },
		{66,     2, "STX",      98,  "b",        66, "66",       "121421" },
		{67,     3, "ETX",      99,  "c",        67, "67",       "141122" },
		{68,     4, "EOT",      100, "d",        68, "68",       "141221" },
		{69,     5, "ENQ",      101, "e",        69, "69",       "112214" },
		{70,     6, "ACK",      102, "f",        70, "70",       "112412" },
		{71,     7, "BEL",      103, "g",        71, "71",       "122114" },
		{72,     8, "BS",       104, "h",        72, "72",       "122411" },
		{73,     9, "HT",       105, "i",        73, "73",       "142112" },
		{74,    10, "LF",       106, "j",        74, "74",       "142211" },
		{75,    11, "VT",       107, "k",        75, "75",       "241211" },
		{76,    12, "FF",       108, "I",        76, "76",       "221114" },
		{77,    13, "CR",       109, "m",        77, "77",       "413111" },
		{78,    14, "SO",       110, "n",        78, "78",       "241112" },
		{79,    15, "SI",       111, "o",        79, "79",       "134111" },
		{80,    16, "DLE",      112, "p",        80, "80",       "111242" },
		{81,    17, "DC1",      113, "q",        81, "81",       "121142" },
		{82,    18, "DC2",      114, "r",        82, "82",       "121241" },
		{83,    19, "DC3",      115, "s",        83, "83",       "114212" },
		{84,    20, "DC4",      116, "t",        84, "84",       "124112" },
		{85,    21, "NAK",      117, "u",        85, "85",       "124211" },
		{86,    22, "SYN",      118, "v",        86, "86",       "411212" },
		{87,    23, "ETB",      119, "w",        87, "87",       "421112" },
		{88,    24, "CAN",      120, "x",        88, "88",       "421211" },
		{89,    25, "EM",       121, "y",        89, "89",       "212141" },
		{90,    26, "SUB",      122, "z",        90, "90",       "214121" },
		{91,    27, "ESC",      123, "{",        91, "91",       "412121" },
		{92,    28, "FS",       124, "|",        92, "92",       "111143" },
		{93,    29, "GS",       125, "}",        93, "93",       "111341" },
		{94,    30, "RS",       126, "~",        94, "94",       "131141" },
		{95,    31, "US",       127, "DEL",      95, "95",       "114113" },
		{96,     0, "FNC3",       0, "FNC3",     96, "96",       "114311" },
		{97,     0, "FNC2",       0, "FNC2",     97, "97",       "411113" },
		{98,     0, "SHIFT",      0, "SHIFT",    98, "98",       "411311" },
		{99,     0, "CODEC",      0, "CODEC",    99, "99",       "113141" },
		{100,    0, "CODEB",      0, "FNC4",      0, "CODEB",    "114131" },
		{101,    0, "FNC4",       0, "CODEA",     0, "CODEA",    "311141" },
		{102,    0, "FNC1",       0, "FNC1",      0, "FNC1",     "411131" },
		{103,    0, "StartA",     0, "StartA",    0, "StartA",   "211412" },
		{104,    0, "StartB",     0, "StartB",    0, "StartB",   "211214" },
		{105,    0, "StartC",     0, "StartC",    0, "StartC",   "211232" },
		{106,    0, "Stop",       0, "Stop",      0, "Stop",     "2331112"}
};

#define CODE128_MINI_BAR_WIDTH_IN	0.0065	//能被识别的最小列宽度，单位英寸
#define CODE128_MINI_BAR_HEIGHT_IN 0.12	//最小高度

/*
 * 根据ASCII取特定编码下对应字符的编码
 */
const char* Code128A_Get_Code(char c);
const char* Code128B_Get_Code(char c);
const char* Code128C_Get_Code(char *str);

/**
 * 根据ASCII取特定编码下对应字符的编码索引
 */
char Code128A_Get_Idx(char c);
char Code128B_Get_Idx(char c);
char Code128C_Get_Idx(char *str);

/**
 * 根据ASCII推断编码类型，优先当前类型
 */
char Code128_Get_Char_Type(char c, char currentType);

//int Code128_Fill_Char(BarCode_BMPHead_Type &head, unsigned char *buf, unsigned int bufLen, const char *code, int codeLen,
//		int &xIdx, int thickness, int h, BarCode_BMRGBQuad_Type &barRGB);
//int Code128_Parse(const char *barcode, int len, char* codeStr, int &codeStrLen, int &codeLen, int &checkSum, char defaultType);

/**
 * 指定生成的BMP图像的宽和高（宽度会被微调以适应4字节对齐），强制全部使用CODE128 B编码，也只支持CODE128 B中的字符（不包含控制字符）
 */
int Code128B_Fill_Buf(const char *barcode, unsigned int barcodeLen, unsigned char *buf, unsigned int bufLen,
		unsigned int& w, unsigned int& h, unsigned int& bmpLen, bool isColorExchange);
/**
 * 指定生成的BMP图像的宽和高（宽度会被微调以适应4字节对齐），以CODE128 B开始编码，对控制字符和连续的数字（连续大于3位）智能转码，以优化长度
 */
int Code128B_Auto_Fill_Buf(const char *barcode, unsigned int barcodeLen, unsigned char *buf, unsigned int bufLen,
		unsigned int& w, unsigned int& h, unsigned int& bmpLen, bool isColorExchange);
/**
 * 指定生成的BMP图像的打印分辨率（宽度和高度自动以最小可识别单位计算），以CODE128 B开始编码，对控制字符和连续的数字（连续大于3位）智能转码，以优化长度
 */
int Code128B_Auto_Fill_Buf(const char *barcode, unsigned int barcodeLen, unsigned char *buf, unsigned int bufLen, unsigned int dpi,
		unsigned int& w, unsigned int& h, unsigned int& bmpLen, bool isColorExchange);

#endif /* CODE128_CODE128_FILL_H_ */
